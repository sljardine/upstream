leaflet::leafletProxy(ns('base_map')),
sfCulverts, #culverts
culvert_lines_sf, #lines with linestring geometries if glify = TRUE
soln, #output from solve_opt()
marginal_line_ids, #comids for all lines marginally upstream of each point
glify = TRUE
)
save(D, file = here("data", "D.rda"))
save(E, file = here("data", "E.rda"))
save(di, file = here("data", "di.rda"))
library(here)
library(sf)
library(tidyverse)
library(ROI)
library(ROI.plugin.glpk)
load(here("data", "connectivity.RData"))
load(here("data", "D.rda"))
load(here("data", "sfCulverts.rda"))
load(here("data", "sfWRIA.rda"))
load(here("data", "culvert_lines.rda"))
View(sfWRIA)
source(here("R", "fct_suggest.R"))
soln <- solve_opt(
points = sfCulverts, #points with variables: hmarg_net, cost, and wria_number
budget = 1000000, #budget constraint
D = D, #connectivity matrix
wria_sel = NULL #wria to run the optimization problem on
)
leaflet_lines <- culvert_lines
leaflet_lines %>% head() %>% print()
get_leaflet_map
get_leaflet_map <- function(){
# init the map
m <- sfWRIA %>%
leaflet::leaflet() %>%
leaflet::addProviderTiles("CartoDB.Positron", group = "Grayscale", options = leaflet::providerTileOptions(minZoom = 7))  %>%
leaflet::addScaleBar("bottomleft")
# add wria polygons
m <- m %>%
leaflet::addPolygons(
popup =  ~ paste0(
"<b>WRIA Name:</b> ",
WRIA_NM,
"<br>",
"<b>WRIA Number:</b> ",
WRIA_NR
),
weight = 1.5,
opacity = 1,
color = "#1c1cff",
fillColor = "transparent"
)
# add circle markers (could use addGlPoints maybe...)
m <- m %>%
leaflet::addCircleMarkers(
data = sfCulverts,
group = 'culverts',
radius = 5,
weight = 1.5,
color = 'black',
opacity = 1,
fillColor = 'grey',
fillOpacity = 1,
clusterOptions = leaflet::markerClusterOptions(
spiderfyOnMaxZoom = FALSE,
disableClusteringAtZoom = 9
),
popup = ~popup
)
}
reset_map <- function(leaf_proxy){
leaf_proxy %>%
leaflet::clearGroup('culverts') %>%
leaflet::clearGroup('selected_wria') %>%
leaflet::addCircleMarkers(
data = sfCulverts,
group = 'culverts',
radius = 5,
weight = 1.5,
color = 'black',
opacity = 1,
fillColor = 'grey',
fillOpacity = 1,
clusterOptions = leaflet::markerClusterOptions(
spiderfyOnMaxZoom = FALSE,
disableClusteringAtZoom = 9
),
popup = ~popup
)
# selected wria bounding box
bbox <- get_wria_bounding_box(sfWRIA$WRIA_NR)
# zoom map to selected wrias
leaf_proxy %>%
leaflet::flyToBounds(bbox[1], bbox[2], bbox[3], bbox[4])
}
get_leaflet_map()
# init the map
m <- sfWRIA %>%
leaflet::leaflet() %>%
leaflet::addProviderTiles("CartoDB.Positron", group = "Grayscale", options = leaflet::providerTileOptions(minZoom = 7))  %>%
leaflet::addScaleBar("bottomleft")
# add wria polygons
m <- m %>%
leaflet::addPolygons(
popup =  ~ paste0(
"<b>WRIA Name:</b> ",
WRIA_NM,
"<br>",
"<b>WRIA Number:</b> ",
WRIA_NR
),
weight = 1.5,
opacity = 1,
color = "#1c1cff",
fillColor = "transparent"
)
# add circle markers (could use addGlPoints maybe...)
m <- m %>%
leaflet::addCircleMarkers(
data = sfCulverts,
group = 'culverts',
radius = 5,
weight = 1.5,
color = 'black',
opacity = 1,
fillColor = 'grey',
fillOpacity = 1,
clusterOptions = leaflet::markerClusterOptions(
spiderfyOnMaxZoom = FALSE,
disableClusteringAtZoom = 9
),
popup = ~popup
)
}
# init the map
m <- sfWRIA %>%
leaflet::leaflet() %>%
leaflet::addProviderTiles("CartoDB.Positron", group = "Grayscale", options = leaflet::providerTileOptions(minZoom = 7))  %>%
leaflet::addScaleBar("bottomleft")
# add wria polygons
m <- m %>%
leaflet::addPolygons(
popup =  ~ paste0(
"<b>WRIA Name:</b> ",
WRIA_NM,
"<br>",
"<b>WRIA Number:</b> ",
WRIA_NR
),
weight = 1.5,
opacity = 1,
color = "#1c1cff",
fillColor = "transparent"
)
m <- m %>%
leaflet::addCircleMarkers(
data = sfCulverts,
group = 'culverts',
radius = 5,
weight = 1.5,
color = 'black',
opacity = 1,
fillColor = 'grey',
fillOpacity = 1,
clusterOptions = leaflet::markerClusterOptions(
spiderfyOnMaxZoom = FALSE,
disableClusteringAtZoom = 9
),
popup = ~popup
)
leaf_proxy = m
glify == TRUE
glify = TRUE
map_leaflet_opt(
m,
sfCulverts, #culverts
culvert_lines_sf, #lines with linestring geometries if glify = TRUE
soln, #output from solve_opt()
marginal_line_ids, #comids for all lines marginally upstream of each point
glify = TRUE
)
map_leaflet_opt(
m,
sfCulverts, #culverts
culvert_lines, #lines with linestring geometries if glify = TRUE
soln, #output from solve_opt()
marginal_line_ids, #comids for all lines marginally upstream of each point
glify = TRUE
)
library(here)
library(sf)
library(tidyverse)
library(ROI)
library(ROI.plugin.glpk)
load(here("data", "D.rda"))
load(here("data", "sfCulverts.rda"))
names(sfCulverts)
library(here)
library(sf)
library(tidyverse)
library(ROI)
library(ROI.plugin.glpk)
load(here("data", "D.rda"))
load(here("data", "culverts_cmb.rda"))
load(here("data", "wrias.rda"))
load(here("data", "culvert_lines.rda"))
load(here("data", "lines_simp.rda"))
load(here("data", "marginal_line_ids.rda"))
source(here("R", "fct_suggest.R"))
soln <- solve_opt(
points = culverts_cmb, #points with variables: hmarg_net, cost, and wria_number
budget = 1000000, #budget constraint
D = D, #connectivity matrix
wria_sel = NULL #wria to run the optimization problem on
)
points = culverts_cmb #culverts
lines = lines_simp #lines with linestring geometries if glify = TRUE
soln = soln #output from solve_opt()
marginal_line_ids = marginal_line_ids #comids for all lines marginally upstream of each point
glify = TRUE
m <- wrias %>%
leaflet::leaflet() %>%
leaflet::addProviderTiles("CartoDB.Positron", group = "Grayscale", options = leaflet::providerTileOptions(minZoom = 7))  %>%
leaflet::addScaleBar("bottomleft")
m <- m %>%
leaflet::addPolygons(
popup =  ~ paste0(
"<b>WRIA Name:</b> ",
WRIA_NM,
"<br>",
"<b>WRIA Number:</b> ",
WRIA_NR
),
weight = 1.5,
opacity = 1,
color = "#1c1cff",
fillColor = "transparent"
)
m <- m %>%
leaflet::addCircleMarkers(
data = culverts_cmb,
group = 'culverts',
radius = 5,
weight = 1.5,
color = 'black',
opacity = 1,
fillColor = 'grey',
fillOpacity = 1,
clusterOptions = leaflet::markerClusterOptions(
spiderfyOnMaxZoom = FALSE,
disableClusteringAtZoom = 9
),
popup = ~popup
)
m
library(here)
library(sf)
library(tidyverse)
library(ROI)
library(ROI.plugin.glpk)
load(here("data", "D.rda"))
load(here("data", "culverts_cmb.rda"))
load(here("data", "wrias.rda"))
load(here("data", "lines_simp.rda"))
load(here("data", "marginal_line_ids.rda"))
source(here("R", "fct_suggest.R"))
soln <- solve_opt(
points = culverts_cmb, #points with variables: hmarg_net, cost, and wria_number
budget = 1000000, #budget constraint
D = D, #connectivity matrix
wria_sel = NULL #wria to run the optimization problem on
)
library(leaflet)
library(leafgl)
soln <- solve_opt(
points = culverts_cmb, #points with variables: hmarg_net, cost, and wria_number
budget = 1000000, #budget constraint
D = D, #connectivity matrix
wria_sel = NULL #wria to run the optimization problem on
)
View(wrias)
soln <- solve_opt(
points = culverts_cmb, #points with variables: hmarg_net, cost, and wria_number
budget = 1e6, #budget constraint
D = D, #connectivity matrix
wria_sel = 7 #wria to run the optimization problem on
)
points = culverts_cmb #culverts
lines = lines_simp #lines with linestring geometries if glify = TRUE
soln = soln #output from solve_opt()
marginal_line_ids = marginal_line_ids #comids for all lines marginally upstream of each point
glify = TRUE
leaflet_proxy <- wrias %>%
leaflet::leaflet() %>%
leaflet::addProviderTiles("CartoDB.Positron", group = "Grayscale", options = leaflet::providerTileOptions(minZoom = 7))  %>%
leaflet::addScaleBar("bottomleft") %>%
leaflet::addPolygons(
popup =  ~ paste0(
"<b>WRIA Name:</b> ",
WRIA_NM,
"<br>",
"<b>WRIA Number:</b> ",
WRIA_NR
),
weight = 1.5,
opacity = 1,
color = "#1c1cff",
fillColor = "transparent"
)
#Crop lines to wrias in solution
soln_wrias <- unique(points[soln, ]$wria_number)
soln_wrias <- unique(points[soln, ]$wria_number)
soln <- as.logical(ROI::solution(soln))
soln_wrias <- unique(points[soln, ]$wria_number)
in_soln_wrias <- points$wria_number %in% soln_wrias
#First get blocked/unblocked lines
blocked_lines <- marginal_line_ids[in_soln_wrias] %>% unlist()
leaflet_lines <- lines %>% filter(COMID %in% blocked_lines)
#Defined blocked/unblocked
milp_stream_ids <- marginal_line_ids[soln] %>% unlist()
#Barrier color
pal <- leaflet::colorNumeric(c("#b80000", "#179848"), 0 : 1)
#Add lines
if(glify == TRUE){
leaflet_lines %>% head() %>% print()
leaf_proxy <- leaf_proxy %>%
leafgl::addGlPolylines(data = leaflet_lines %>%
filter(FCODE != 55800, !COMID %in% milp_stream_ids),
color = "#d46666",
opacity = 0.5
) %>%
leafgl::addGlPolylines(
data = leaflet_lines %>%
filter(COMID %in% milp_stream_ids),
color = "#3cdd78",
opacity = 0.5
)
}
leaf_proxy=leaflet_proxy
#Add lines
if(glify == TRUE){
leaflet_lines %>% head() %>% print()
leaf_proxy <- leaf_proxy %>%
leafgl::addGlPolylines(data = leaflet_lines %>%
filter(FCODE != 55800, !COMID %in% milp_stream_ids),
color = "#d46666",
opacity = 0.5
) %>%
leafgl::addGlPolylines(
data = leaflet_lines %>%
filter(COMID %in% milp_stream_ids),
color = "#3cdd78",
opacity = 0.5
)
}
else{
leaflet_lines %>% head() %>% print()
leaf_proxy <- leaf_proxy %>%
leafgl::addGlPolylines(data = leaflet_lines %>%
filter(FCODE != 55800, !COMID %in% milp_stream_ids),
color = "#d46666",
opacity = 0.5
) %>%
leafgl::addGlPolylines(
data = leaflet_lines %>%
filter(COMID %in% milp_stream_ids),
color = "#3cdd78",
opacity = 0.5
)
leaf_proxy
library(here)
library(leaflet)
library(leafgl)
library(sf)
library(tidyverse)
library(ROI)
library(ROI.plugin.glpk)
load(here("data", "D.rda"))
load(here("data", "culverts_cmb.rda"))
load(here("data", "wrias.rda"))
load(here("data", "lines_simp.rda"))
load(here("data", "marginal_line_ids.rda"))
source(here("R", "fct_suggest.R"))
soln <- solve_opt(
points = culverts_cmb, #points with variables: hmarg_net, cost, and wria_number
budget = 1e6, #budget constraint
D = D, #connectivity matrix
wria_sel = 7 #wria to run the optimization problem on
)
points = culverts_cmb #culverts
lines = lines_simp #lines with linestring geometries if glify = TRUE
soln = soln #output from solve_opt()
marginal_line_ids = marginal_line_ids #comids for all lines marginally upstream of each point
leaflet_proxy <- wrias %>%
leaflet::leaflet() %>%
leaflet::addProviderTiles("CartoDB.Positron", group = "Grayscale", options = leaflet::providerTileOptions(minZoom = 7))  %>%
leaflet::addScaleBar("bottomleft") %>%
leaflet::addPolygons(
popup =  ~ paste0(
"<b>WRIA Name:</b> ",
WRIA_NM,
"<br>",
"<b>WRIA Number:</b> ",
WRIA_NR
),
weight = 1.5,
opacity = 1,
color = "#1c1cff",
fillColor = "transparent"
)
map_leaflet_opt(
leaflet_proxy,
culverts_cmb, #culverts
lines_simp, #lines with linestring geometries
soln, #output from solve_opt()
marginal_line_ids #comids for all lines marginally upstream of each point
)
library(here)
library(leaflet)
library(leafgl)
library(sf)
library(tidyverse)
library(ROI)
library(ROI.plugin.glpk)
load(here("data", "D.rda"))
load(here("data", "culverts_cmb.rda"))
load(here("data", "wrias.rda"))
load(here("data", "lines_simp.rda"))
load(here("data", "marginal_line_ids.rda"))
source(here("R", "fct_suggest.R"))
soln <- solve_opt(
points = culverts_cmb, #points with variables: hmarg_net, cost, and wria_number
budget = 1e6, #budget constraint
D = D, #connectivity matrix
wria_sel = 7 #wria to run the optimization problem on
)
points = culverts_cmb #culverts
lines = lines_simp #lines with linestring geometries if glify = TRUE
soln = soln #output from solve_opt()
marginal_line_ids = marginal_line_ids #comids for all lines marginally upstream of each point
leaflet_proxy <- wrias %>%
leaflet::leaflet() %>%
leaflet::addProviderTiles("CartoDB.Positron", group = "Grayscale", options = leaflet::providerTileOptions(minZoom = 7))  %>%
leaflet::addScaleBar("bottomleft") %>%
leaflet::addPolygons(
popup =  ~ paste0(
"<b>WRIA Name:</b> ",
WRIA_NM,
"<br>",
"<b>WRIA Number:</b> ",
WRIA_NR
),
weight = 1.5,
opacity = 1,
color = "#1c1cff",
fillColor = "transparent"
)
map_leaflet_opt(
leaflet_proxy,
culverts_cmb, #culverts
lines_simp, #lines with linestring geometries
soln, #output from solve_opt()
marginal_line_ids #comids for all lines marginally upstream of each point
)
library(here)
library(leaflet)
library(leafgl)
library(sf)
library(tidyverse)
library(ROI)
library(ROI.plugin.glpk)
load(here("data", "D.rda"))
load(here("data", "culverts_cmb.rda"))
load(here("data", "wrias.rda"))
load(here("data", "lines_simp.rda"))
load(here("data", "marginal_line_ids.rda"))
source(here("R", "fct_suggest.R"))
soln <- solve_opt(
points = culverts_cmb, #points with variables: hmarg_net, cost, and wria_number
budget = 1e6, #budget constraint
D = D, #connectivity matrix
wria_sel = 7 #wria to run the optimization problem on
)
points = culverts_cmb #culverts
lines = lines_simp #lines with linestring geometries if glify = TRUE
soln = soln #output from solve_opt()
marginal_line_ids = marginal_line_ids #comids for all lines marginally upstream of each point
leaf_proxy <- wrias %>%
leaflet::leaflet() %>%
leaflet::addProviderTiles("CartoDB.Positron", group = "Grayscale", options = leaflet::providerTileOptions(minZoom = 7))  %>%
leaflet::addScaleBar("bottomleft") %>%
leaflet::addPolygons(
popup =  ~ paste0(
"<b>WRIA Name:</b> ",
WRIA_NM,
"<br>",
"<b>WRIA Number:</b> ",
WRIA_NR
),
weight = 1.5,
opacity = 1,
color = "#1c1cff",
fillColor = "transparent"
)
map_leaflet_opt(
leaf_proxy,
culverts_cmb, #culverts
lines_simp, #lines with linestring geometries
soln, #output from solve_opt()
marginal_line_ids #comids for all lines marginally upstream of each point
)
as.integer("$ 100,000")
