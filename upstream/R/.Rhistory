`Chum` = round(sum(hmarg * grepl("Chum", potential_species)), 2),
`Coho` = round(sum(hmarg * grepl("Coho", potential_species)), 2),
`Pink` = round(sum(hmarg * grepl("Pink", potential_species)), 2),
`Sockeye` = round(sum(hmarg * grepl("Sockeye", potential_species)), 2),
`Steelhead` = round(sum(hmarg * grepl("Steelhead", potential_species)), 2),
`Total Habitat` = round(sum(hmarg), 2),
`Natural` = round(sum(hmarg * hmarg_nat_percent, na.rm = TRUE), 2),
`Agricultural` = round(sum(hmarg * hmarg_ag_percent, na.rm = TRUE), 2),
`Urban` = round(sum(hmarg * hmarg_urb_percent, na.rm = TRUE), 2)
) %>%
t() %>%
as.data.frame()
cost = 1
mean_design_cost = NULL
mean_construction_cost = NULL
# cost adjustment
if(cost == 2){
points <- points %>%
dplyr::mutate(
cost = cost * mean_construction_cost / mean(cost) + mean_design_cost,
cost_text = paste0("$", format(round(cost, 0), nsmall = 0, big.mark = ","))
)
} else {
points <- points %>%
dplyr::mutate(
cost_text = paste0("$", format(round(cost, 0), nsmall = 0, big.mark = ","))
)
}
# planned barrier selection if barrier is already planned by user
points <- points %>%
dplyr::mutate(proj_plan = ifelse(
site_id %in% barrier_idp, paste("Yes"), paste("No"))
)
plan_list <- points %>%
sf::st_drop_geometry() %>%
dplyr::filter(points_sel) %>%
dplyr::filter(proj_plan == "No") %>%
dplyr::select(site_id, huc_name, cost_text) %>%
as.data.frame() %>%
dplyr::rename(
`Site ID` = site_id,
`HUC 12 Name` = huc_name,
`Estimated Site Cost` = cost_text
)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
leaflet_lines %>% dplyr::filter(COMID %in% NULL)
barrier_idp = 0
#Convert custom portfolio to TRUE/FALSE vector
cust <- points$site_id %in% prtf_cust_idp
if(! 0 %in% barrier_idp){
idp <- points$site_id %in% barrier_idp
prtf_cust_idp <- c(prtf_cust, barrier_idp)
} else {
idp <- NULL
prtf_cust_idp <- prtf_cust
}
#Identify points in custom plan that unlock habitat
h_inc <- lapply(
1 : length(prtf_cust_idp),
FUN = function(x) ifelse(
sum(E[, prtf_cust_idp[x]]) == 0, TRUE,
ifelse(
sum(which(E[, prtf_cust_idp[x]] == 1) %in% prtf_cust_idp) ==
length(which(E[, prtf_cust_idp[x]] == 1)), TRUE, FALSE)
)
) %>%
do.call("rbind", .) %>%
as.logical()
#Crop lines to wrias in plan regardless of whether they unlock habitat
cust_wrias <- unique(points[points$site_id %in% prtf_cust_idp, ]$wria_number)
in_cust_wrias <- points$wria_number %in% cust_wrias
#First get blocked/unblocked lines
blocked_lines <- marginal_line_ids[in_cust_wrias] %>% base::unlist()
ds_blocked_lines <- downstream_line_ids[in_cust_wrias] %>% base::unlist()
leaflet_lines <- lines %>% dplyr::filter(COMID %in% blocked_lines)
ds_leaflet_lines <- dslines %>% dplyr::filter(COMID %in% ds_blocked_lines)
#Defined blocked/unblocked
names(marginal_line_ids) <- points$site_id
names(downstream_line_ids) <- points$site_id
cust_stream_ids <- marginal_line_ids[prtf_cust[h_inc]] %>% base::unlist()
ds_stream_ids <- downstream_line_ids[prtf_cust_idp[h_inc]] %>% base::unlist()
if(! 0 %in% barrier_idp){
idp_stream_ids <- marginal_line_ids[barrier_idp[h_inc]] %>% base::unlist()
} else {
idp_stream_ids <- NULL
}
# # define unblocked lines color pallet
# lines_pal <- leaflet::colorNumeric(c("#2739c7", "#f1e2bA"), 0 : 1)
#
leaf_proxy <- leaf_proxy %>%
leafgl::addGlPolylines(
data = leaflet_lines %>%
dplyr::filter(!COMID %in% cust_stream_ids & !COMID %in% idp_stream_ids),
color = "#cf6e7d",
opacity = 0.5,
group = "blocked_lines"
)  %>%
leafgl::addGlPolylines(
data = leaflet_lines %>%
dplyr::filter(COMID %in% cust_stream_ids),
color = "#2739c7",
opacity = 0.5,
group = "unblocked_lines"
)
if(! 0 %in% barrier_idp){
leaf_proxy <- leaf_proxy %>%
leafgl::addGlPolylines(
data = leaflet_lines %>%
dplyr::filter(COMID %in% idp_stream_ids),
color = "#f1e2bA",
opacity = 0.5,
group = "unblocked_lines"
)
}
#test for null sets in ds lines. If FALSE draw lines
testfilter <- ds_leaflet_lines %>% dplyr::filter(COMID %in% ds_stream_ids & !COMID %in% cust_stream_ids & !COMID %in% idp_stream_ids)
if (inherits(sf::st_geometry(testfilter), c("sfc_LINESTRING", "sfc_MULTILINESTRING")) == TRUE){
leaf_proxy <- leaf_proxy %>%
leafgl::addGlPolylines(
data = ds_leaflet_lines %>%
dplyr::filter(COMID %in% ds_stream_ids & !COMID %in% cust_stream_ids & !COMID %in% idp_stream_ids),
color = "#b0b0b0",
opacity = 0.25,
group = "unblocked_lines"
) } else {
NULL
}
# define project color pallet
pal <- leaflet::colorNumeric(c("#d9a1a0", "#91afeb", "#f1e2b9"), 0 : 2)
# define match border pallet
match_pal <- leaflet::colorFactor(palette = c("black", "transparent"), domain = c(TRUE, FALSE), ordered = TRUE)
#Add culverts
leaf_proxy <- leaf_proxy %>%
leaflet::addCircleMarkers(
data = points,
lng = ~ site_longitude,
lat = ~ site_latitude,
group = "selected_culverts",
radius = 5,
weight = 1.5,
color = ~match_pal(bad_match),
fillColor = ~pal(cust + idp),
fillOpacity = 1,
opacity = 1,
clusterOptions = leaflet::markerClusterOptions(
iconCreateFunction = htmlwidgets::JS("function (cluster) {
var childCount = cluster.getChildCount();
if (childCount < 100) {
c = 'rgba(204, 252, 255, 1.0);'
} else if (childCount < 1000) {
c = 'rgba(237, 192, 181, 1);'
} else {
c = 'rgba(164, 164, 243, 1);'
}
return new L.DivIcon({ html: '<div style=\"background-color:'+c+'\"><span>' + childCount + '</span></div>',
className: 'marker-cluster', iconSize: new L.Point(40, 40) });}"),
spiderfyOnMaxZoom = FALSE,
disableClusteringAtZoom = 10
),
popup = ~popup
)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
rep(1, base::nrow(points))
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
!2 %in% 1 & !2 %in% 5
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
barrier_idp = 0
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
barrier_idp = c("115 MC040") %>% as.vector()
prtf_cust = c("115 MC097") %>% as.vector()
#Convert custom portfolio to TRUE/FALSE vector
cust <- points$site_id %in% prtf_cust
if(! 0 %in% barrier_idp){
idp <- (points$site_id %in% barrier_idp) * 2
prtf_cust_idp <- c(prtf_cust, barrier_idp)
} else {
idp <- rep(0, base::nrow(points))
prtf_cust_idp <- prtf_cust
}
cust_idp <- cust + idp
#Identify points in custom plan that unlock habitat
h_inc <- lapply(
1 : length(prtf_cust_idp),
FUN = function(x) ifelse(
sum(E[, prtf_cust_idp[x]]) == 0, TRUE,
ifelse(
sum(which(E[, prtf_cust_idp[x]] == 1) %in% prtf_cust_idp) ==
length(which(E[, prtf_cust_idp[x]] == 1)), TRUE, FALSE)
)
) %>%
do.call("rbind", .) %>%
as.logical()
#Crop lines to wrias in plan regardless of whether they unlock habitat
cust_wrias <- unique(points[points$site_id %in% prtf_cust_idp, ]$wria_number)
in_cust_wrias <- points$wria_number %in% cust_wrias
#First get blocked/unblocked lines
blocked_lines <- marginal_line_ids[in_cust_wrias] %>% base::unlist()
ds_blocked_lines <- downstream_line_ids[in_cust_wrias] %>% base::unlist()
leaflet_lines <- lines %>% dplyr::filter(COMID %in% blocked_lines)
ds_leaflet_lines <- dslines %>% dplyr::filter(COMID %in% ds_blocked_lines)
#Defined blocked/unblocked
names(marginal_line_ids) <- points$site_id
names(downstream_line_ids) <- points$site_id
cust_stream_ids <- marginal_line_ids[prtf_cust[h_inc]] %>% base::unlist()
ds_stream_ids <- downstream_line_ids[prtf_cust_idp[h_inc]] %>% base::unlist()
if(! 0 %in% barrier_idp){
idp_stream_ids <- marginal_line_ids[barrier_idp[h_inc]] %>% base::unlist()
} else {
idp_stream_ids <- NULL
}
leaf_proxy <- leaf_proxy %>%
leafgl::addGlPolylines(
data = leaflet_lines %>%
dplyr::filter(!COMID %in% cust_stream_ids & !COMID %in% idp_stream_ids),
color = "#cf6e7d",
opacity = 0.5,
group = "blocked_lines"
)
draw_ub_lines <- leaflet_lines %>% dplyr::filter(COMID %in% cust_stream_ids)
draw_ub_lines
inherits(sf::st_geometry(draw_ub_lines), c("sfc_LINESTRING", "sfc_MULTILINESTRING")) == TRUE
draw_ub_lines <- leaflet_lines %>% dplyr::filter(COMID %in% cust_stream_ids)
if (inherits(sf::st_geometry(draw_ub_lines), c("sfc_LINESTRING", "sfc_MULTILINESTRING")) == TRUE){
leaf_proxy <- leaf_proxy %>%
leafgl::addGlPolylines(
data = leaflet_lines %>%
dplyr::filter(COMID %in% cust_stream_ids),
color = "#2739c7",
opacity = 0.5,
group = "unblocked_lines"
) } else {
NULL
}
if(! 0 %in% barrier_idp){
leaf_proxy <- leaf_proxy %>%
leafgl::addGlPolylines(
data = leaflet_lines %>%
dplyr::filter(COMID %in% idp_stream_ids),
color = "#f1e2bA",
opacity = 0.5,
group = "unblocked_lines"
)
}
check <- leaflet_lines %>%
dplyr::filter(COMID %in% idp_stream_ids)
if(! 0 %in% barrier_idp){
#draw idp lines if there are any
draw_idp_lines <- leaflet_lines %>% dplyr::filter(COMID %in% idp_stream_ids)
if (inherits(sf::st_geometry(draw_ub_lines), c("sfc_LINESTRING", "sfc_MULTILINESTRING")) == TRUE){
leaf_proxy <- leaf_proxy %>%
leafgl::addGlPolylines(
data = leaflet_lines %>%
dplyr::filter(COMID %in% idp_stream_ids),
color = "#f1e2bA",
opacity = 0.5,
group = "unblocked_lines"
)
} else {
NULL
}
}
#draw downstream lines if there are any
draw_ds_lines <- ds_leaflet_lines %>% dplyr::filter(COMID %in% ds_stream_ids & !COMID %in% cust_stream_ids & !COMID %in% idp_stream_ids)
if (inherits(sf::st_geometry(draw_ds_lines), c("sfc_LINESTRING", "sfc_MULTILINESTRING")) == TRUE){
leaf_proxy <- leaf_proxy %>%
leafgl::addGlPolylines(
data = ds_leaflet_lines %>%
dplyr::filter(COMID %in% ds_stream_ids & !COMID %in% cust_stream_ids & !COMID %in% idp_stream_ids),
color = "#b0b0b0",
opacity = 0.25,
group = "unblocked_lines"
) } else {
NULL
}
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
??addWMSTiles
