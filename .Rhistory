y= "Latitude",
title = "World Map") +
theme_bw()
ggplot(data = world) +
geom_sf(aes(fill = pop_dens), color = "transparent") +
scale_fill_continuous(name = "pop/km^2") +
labs(x = "Longitude",
y= "Latitude",
title = "World Map") +
theme_bw()
ggplot(data = world) +
geom_sf(aes(fill = pop_dens), color = "transparent") +
scale_fill_continuous(name = "pop/km^2",
low = "green", high = "red") +
labs(x = "Longitude",
y= "Latitude",
title = "World Map") +
theme_bw()
ggplot(data = world) +
geom_sf(aes(fill = pop_dens), color = "transparent") +
scale_fill_gradient2(name = "Population", low = "blue",
mid = "white", high = "red", midpoint = 600) +
labs(x = "Longitude",
y= "Latitude",
title = "World Map") +
theme_bw()
ggplot(data = world) +
geom_sf(aes(fill = pop_dens), color = "transparent") +
scale_fill_viridis_c(option = "plasma", name = "Population") +
labs(x = "Longitude",
y= "Latitude",
title = "World Map") +
theme_bw()
ggplot(data = world) +
geom_sf(aes(fill = pop_dens), color = "transparent") +
scale_fill_viridis_c(option = "plasma",
trans = "log",
name = "ln(pop/km^2)",
direction = -1) +
labs(x = "Longitude", y= "Latitude",
title = "World Map") +
theme_bw()
ggplot(data = world) +
geom_sf(aes(fill = continent), color = "transparent") +
scale_fill_discrete() +
labs(x = "Longitude", y= "Latitude",
title = "World Map") +
theme_bw()
ggplot(data = world) +
geom_sf(aes(fill = continent), color = "transparent") +
scale_fill_brewer(palette = "YlOrRd") +
labs(x = "Longitude", y= "Latitude",
title = "World Map") +
theme_bw()
#' ## leaflet
leaflet(world) %>%
addTiles() %>%
addPolygons()
pal <- colorBin(
palette = "plasma",
domain = world$pop_dens,
bins = 5
)
leaflet(world) %>%
addTiles() %>%
addPolygons(fillColor = ~pal(pop_dens),
fillOpacity = 1,
weight = 0.9,
smoothFactor = 0.2)
# +
#' # Raster data
#' ## Base R
dem_filepath <- system.file("raster/srtm.tif", package = "spDataLarge")
dem <- rast(dem_filepath)
class(dem)
dem
plot(dem)
dem_df <- as.data.frame(dem, xy = TRUE) # convert to dataframe
ggplot() +
geom_raster(data = dem_df,
aes(x = x, y = y, fill = srtm)) +
scale_fill_gradient(low = "dodgerblue3", high = "firebrick",
name = "Elevation") +
labs(y = "Latitude", x = "Longitude") +
theme_bw()
ggplot() +
geom_raster(data = dem_df,
aes(x = x, y = y, fill = srtm)) +
scale_fill_gradient(low = "dodgerblue3", high = "firebrick",
name = "Elevation", na.value = "transparent") +
labs(y = "Latitude", x = "Longitude") +
theme_bw()
65*2
35*3+30*2+30.25+25
.8849 / .9162
1-0.9658372
.9091 /.921
1-0.9870793
1000^0.25
10000000^0.25
1000000000000000000000000000000000^0.25
100000000000000000000000000000000000000000000000^0.25
1.75*15
set.seed(1)
sample(c("Caitie", "Hannah", "Kat", "Sunny"), 98, replace = TRUE)
set.seed(1)
assignment <- sample(c("Caitie", "Hannah", "Kat", "Sunny"), 98, replace = TRUE)
set.seed(1)
assignment <- sample(c("Caitie", "Hannah", "Kat", "Sunny"), 98, replace = TRUE) %>% as.data.frame()
set.seed(1)
assignment <- as.data.frame(sample(c("Caitie", "Hannah", "Kat", "Sunny"), 98, replace = TRUE))
View(assignment)
set.seed(1)
sample(seq(1, 98, 1), 15, replace = F)
set.seed(1)
studies <- sample(seq(1, 98, 1), 15, replace = F)
set.seed(1)
studies <- sample(seq(1, 98, 1), 20, replace = F)
set.seed(2)
assignments <- sample(rep(c("caitie", "hannah", "kat", "sunny"), 5))
cbind(studies, assignments)
xf <- 1:10
yf <- 2:4
add_check <- (x, y){x + y}
c(outer(xf, yf, FUN = add_check))
xf <- 1:10
yf <- 2:4
add_check <- function(x, y){x + y}
c(outer(xf, yf, FUN = add_check))
xf <- 1:10
yf <- 2:4
add_check <- function(x, y){x + y}
results <- c(outer(xf, yf, FUN = add_check)) %>% rbind()
library(tidyverse)
xf <- 1:10
yf <- 2:4
add_check <- function(x, y){x + y}
results <- c(outer(xf, yf, FUN = add_check)) %>% rbind()
View(results)
4*3*2
install.packages("gtools")
library(gtools)
permutations(n = 4, r = 4, v = c("L", "ML", "MH", "H"))
barrier_order_2streams <- permutations(n = 4, r = 4, v = c("L", "ML", "MH", "H"))
View(barrier_order_2streams)
write.csv(barrier_order_2streams, "barrier_orders.csv")
#devtools::install_github("16EAGLE/basemaps")
library(basemaps)
library(sf)
library(spData)
library(tidyverse)
world <- read_sf(system.file("shapes/world.gpkg", package="spData"))
indonesia <- world %>% filter(name_long == "Indonesia")
# from https://jakob.schwalb-willmann.de/basemaps/#supported-services-and-maps
data(ext)
class(ext)
# from script 3
ind_box <- st_as_sfc(st_bbox(indonesia))
class(ind_box)
# view all available maps
get_maptypes()
# test
basemap_magick(ext, map_service = "esri", map_type = "world_imagery")
basemap_magick(ind_box, map_service = "esri", map_type = "world_imagery")
# plot
#method 1
ggplot() +
basemap_gglayer(ext = ind_box, map_service = "osm_stamen", map_type = "terrain") +
geom_sf(color = "red", fill = "transparent", data = indonesia) +
theme_void()
??basemap_gglayer
bsmp <- basemap_ggplot(ind_box)
bsmp
set_defaults(map_service = "osm_stamen",
map_type = "terrain")
bsmp <- basemap_ggplot(ind_box)
bsmp
bsmp +
geom_sf(color = "red", fill = "transparent", data = indonesia) +
theme_void()
bsmp
class(bsmp)
bsmp +
geom_sf(color = "red", fill = "transparent",
data = indonesia) +
coord_sf() +
theme_void()
??coord_sf
library(shiny)
runExample("09_upload")
library(shiny); runApp('Desktop/example_app.R')
library(shiny)
library(shinyFeedback)
ui <- function(){
tagList(
# Attaching the {shinyFeedback} dependencies
useShinyFeedback(),
# Recreating our selectInput + plot from before
selectInput(
"species",
"Choose one or more species",
choices = unique(iris$Species),
multiple = TRUE,
selected = unique(iris$Species)[1]
),
plotOutput("plt")
)
}
server <- function(
input,
output,
session
){
output$plt <- renderPlot({
# If the length of the input is 0
# (i.e. nothing is selected),we show
# a feedback to the user in the form of a text
# If the length > 0, we remove the feedback.
if (length(input$species) == 0){
showFeedbackWarning(
inputId = "species",
text = "Select at least one Species"
)
} else {
hideFeedback("species")
}
# req() allows to stop further code execution
# if the condition is not a truthy.
# Hence if input$species is NULL, the computation
# will be stopped here.
req(input$species)
plot(
iris[ iris$Species %in% input$species, ]
)
})
}
shinyApp(ui, server)
install.packages("shinyFeedback")
runApp('Desktop/example_app_revised.R')
install.packages(golem)
install.packages("golem")
golem::create_golem(path = "Desktop/golemDemo")
library(shiny); runApp('Desktop/dashboard_example.R')
runApp('Desktop/dashboard_example.R')
runApp('Desktop/dashboard_example.R')
5200*12
5800*12
library(shiny); runApp('Desktop/rintrojs_demo.R')
library(shiny); runApp('Desktop/infoButton_demo.R')
??div
??shiny::div
library(shiny); runApp('Desktop/condititionalInput_demo.R')
library(shiny); runApp('Desktop/moduleTalk_method1.R')
library(shiny); runApp('Desktop/moduleTalk_ method2.R')
library(shiny); runApp('Desktop/multipleSubmit_demo.R')
library(tidyverse)
runApp('Desktop/multipleSubmit_demo.R')
golem::create_golem(path = "desktop/culvert_app")
golem::create_golem(path = "desktop/upstream")
server <- function(input, output,session) {
observeEvent(input$weight1, {
updateNumericInput(session, 'weight2',
value = 1 - input$weight1)
})
output$value1 <- renderPrint({ input$weight1 })
output$value2 <- renderPrint({ input$weight2 })
}
library(shiny)
runApp('Desktop/weights_demo.R')
library(shiny); runApp('Desktop/colorButton_demo.R')
shiny::runGitHub(repo = "kennedymwavu/landing-page")
install.packages("shinyjqui")
shiny::runGitHub(repo = "kennedymwavu/landing-page")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library(shiny); runApp('Desktop/home_demo.R')
runApp('Desktop/home_demo.R')
runApp('Desktop/home_demo.R')
runApp('Desktop/home_demo.R')
120+85
library(shiny); runApp('Desktop/gargoyle_demo.R')
runApp('Desktop/gargoyle_demo.R')
runApp('Desktop/gargoyle_demo.R')
environment()
3353/10465
1-0.32
161 â€“ 28
161 - 28
27*40*52
0.560*38.2
19.1*2
21.39+33.38+19
#' ---
#' title: "Process Dataset for DiD Analysis"
#' author: "Sunny Jardine"
#' date: '`r format(Sys.Date(), "%B %d, %Y")`'
#' output:
#'    github_document:
#'       toc: true
#' ---
#'
#+ include=F
# Prepare environment and data ----
library(here)
library(tidyverse)
library(glue)
library(lubridate)
library(labelled)
options(dplyr.summarise.inform = FALSE)
load(here("confidential","processed_withMetier.RData"))
load(here("confidential","processed_withMetier.RData"))
library(here)
here()
0.055/0.034
0.06/0.037
0.095/0.052
(124-214)/241
#' ---
#' title: "Process Dataset for DiD Analysis"
#' author: "Sunny Jardine"
#' date: '`r format(Sys.Date(), "%B %d, %Y")`'
#' output:
#'    github_document:
#'       toc: true
#' ---
#'
#+ include=F
# Prepare environment and data ----
library(here)
library(tidyverse)
library(glue)
library(lubridate)
library(labelled)
options(dplyr.summarise.inform = FALSE)
load(here("confidential","processed_withMetier.RData"))
(exp(-0.772)-1)*100
(exp(0.772)-1)*100
(exp(-0.889)-1)*100
(exp(-0.247)-1)*100
(exp(-0.217)-1)*100
(exp(-0.219)-1)*100
40*15*4*1.5
165*0.55
165000*0.055
165000*0.02
165000*0.075
165000*0.05
200/165
220/165
190*1.15
library(shiny)
library(shinydashboard)
# UI ---------------------------------------------------------------------
ui <- fluidPage(
tabsetPanel(
id = "panels",
tabPanel(
"A",
p(),
actionLink("link_to_tabpanel_b", "Link to panel B")
),
tabPanel(
"B",
h3("Some information"),
tags$li("Item 1"),
tags$li("Item 2"),
actionLink("link_to_tabpanel_a", "Link to panel A")
)
)
)
# Server ------------------------------------------------------------------
server <- function(input, output, session) {
#   observeEvent(input$link_to_tabpanel_b, {
#     tags$a(href = "#tab-4527-2")
#   })
observeEvent(input$link_to_tabpanel_b, {
newvalue <- "B"
updateTabItems(session, "panels", newvalue)
})
observeEvent(input$link_to_tabpanel_a, {
newvalue <- "A"
updateTabsetPanel(session, "panels", newvalue)
})
}
shinyApp(ui, server)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
shinyApp(
ui = dashboardPage(
dashboardHeader(
tags$li(class = "dropdown", tags$a(href = "", class = "my_class", "Help", target="_blank")),
tags$li(class = "dropdown", tags$a(href = "", class = "my_class", "Contact us")),
tags$li(class = "dropdown", actionLink("ChangePassword", "Change Password", class = "my_class"))),
dashboardSidebar(),
dashboardBody(tags$head(
tags$style(HTML("
.my_class {
font-weight: bold;
color:white;
}"))
)),
title = "Dashboard example"
),
server = function(input, output) { }
)
library(shiny); runApp('Desktop/test.R')
library(shinydashboard)
runApp('Desktop/test.R')
library(shiny)
library(shinydashboard)
shinyApp(
ui =  shinydashboard::dashboardPage(
shinydashboard::dashboardHeader(
tags$li(class = "title",
tags$button(id = ns("title"),
class = "btn action-button",
tags$b("Upstream")
),
tags$li(class = "dropdown",
tags$img(src = "www/no_logo.png", height = "50")
)
),
shinydashboard::dashboardSidebar(disable = TRUE),
shinydashboard::dashboardBody(
shinydashboard::tabBox(
title = "",
id = "tabset1",
side = "left", height = "750px",
selected = "Welcome",
shiny::tabPanel("Welcome", mod_Welcome_ui("Welcome_1")),
shiny::tabPanel("Explore", mod_Explore_ui("Explore_1")),
shiny::tabPanel("Suggest", mod_Suggest_ui("Suggest_1")),
shiny::tabPanel("Custom", mod_Custom_ui("Custom_1")),
shiny::tabPanel("Learn", mod_Learn_ui("Learn_1"))
)
)
)
),
server = function(input, output) { }
)
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
shinyApp(
ui =  shinydashboard::dashboardPage(
shinydashboard::dashboardHeader(
tags$li(class = "dropdown",
tags$button(id = "title",
class = "btn action-button",
tags$b("Upstream"))
),
shinydashboard::dashboardSidebar(disable = TRUE),
shinydashboard::dashboardBody(
shinydashboard::tabBox(
title = "",
id = "tabset1",
side = "left", height = "750px",
selected = "Welcome",
shiny::tabPanel("Welcome"),
shiny::tabPanel("Explore"),
shiny::tabPanel("Suggest")
)
)
)
),
server = function(input, output) { }
)
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
install.packages("shinydashboardPlus")
library(shiny); runApp('Desktop/test.R')
library(shinydashboardPlus)
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
runApp('Desktop/test.R')
??tags$li
??tags
??dashboardHeader
75000/12
6250*0.5
setwd("~/Dropbox/upstream")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
getwd()
