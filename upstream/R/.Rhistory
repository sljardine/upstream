load(here("data", "marginal_line_ids.rda"))
source(here("R", "fct_suggest.R"))
soln <- solve_opt(
points = culverts_cmb, #points with variables: hmarg_net, cost, and wria_number
budget = 1000000, #budget constraint
D = D, #connectivity matrix
wria_sel = NULL #wria to run the optimization problem on
)
points = culverts_cmb #culverts
lines = lines_simp #lines with linestring geometries if glify = TRUE
soln = soln #output from solve_opt()
marginal_line_ids = marginal_line_ids #comids for all lines marginally upstream of each point
glify = TRUE
m <- wrias %>%
leaflet::leaflet() %>%
leaflet::addProviderTiles("CartoDB.Positron", group = "Grayscale", options = leaflet::providerTileOptions(minZoom = 7))  %>%
leaflet::addScaleBar("bottomleft")
m <- m %>%
leaflet::addPolygons(
popup =  ~ paste0(
"<b>WRIA Name:</b> ",
WRIA_NM,
"<br>",
"<b>WRIA Number:</b> ",
WRIA_NR
),
weight = 1.5,
opacity = 1,
color = "#1c1cff",
fillColor = "transparent"
)
m <- m %>%
leaflet::addCircleMarkers(
data = culverts_cmb,
group = 'culverts',
radius = 5,
weight = 1.5,
color = 'black',
opacity = 1,
fillColor = 'grey',
fillOpacity = 1,
clusterOptions = leaflet::markerClusterOptions(
spiderfyOnMaxZoom = FALSE,
disableClusteringAtZoom = 9
),
popup = ~popup
)
m
library(here)
library(sf)
library(tidyverse)
library(ROI)
library(ROI.plugin.glpk)
load(here("data", "D.rda"))
load(here("data", "culverts_cmb.rda"))
load(here("data", "wrias.rda"))
load(here("data", "lines_simp.rda"))
load(here("data", "marginal_line_ids.rda"))
source(here("R", "fct_suggest.R"))
soln <- solve_opt(
points = culverts_cmb, #points with variables: hmarg_net, cost, and wria_number
budget = 1000000, #budget constraint
D = D, #connectivity matrix
wria_sel = NULL #wria to run the optimization problem on
)
library(leaflet)
library(leafgl)
soln <- solve_opt(
points = culverts_cmb, #points with variables: hmarg_net, cost, and wria_number
budget = 1000000, #budget constraint
D = D, #connectivity matrix
wria_sel = NULL #wria to run the optimization problem on
)
View(wrias)
soln <- solve_opt(
points = culverts_cmb, #points with variables: hmarg_net, cost, and wria_number
budget = 1e6, #budget constraint
D = D, #connectivity matrix
wria_sel = 7 #wria to run the optimization problem on
)
points = culverts_cmb #culverts
lines = lines_simp #lines with linestring geometries if glify = TRUE
soln = soln #output from solve_opt()
marginal_line_ids = marginal_line_ids #comids for all lines marginally upstream of each point
glify = TRUE
leaflet_proxy <- wrias %>%
leaflet::leaflet() %>%
leaflet::addProviderTiles("CartoDB.Positron", group = "Grayscale", options = leaflet::providerTileOptions(minZoom = 7))  %>%
leaflet::addScaleBar("bottomleft") %>%
leaflet::addPolygons(
popup =  ~ paste0(
"<b>WRIA Name:</b> ",
WRIA_NM,
"<br>",
"<b>WRIA Number:</b> ",
WRIA_NR
),
weight = 1.5,
opacity = 1,
color = "#1c1cff",
fillColor = "transparent"
)
#Crop lines to wrias in solution
soln_wrias <- unique(points[soln, ]$wria_number)
soln_wrias <- unique(points[soln, ]$wria_number)
soln <- as.logical(ROI::solution(soln))
soln_wrias <- unique(points[soln, ]$wria_number)
in_soln_wrias <- points$wria_number %in% soln_wrias
#First get blocked/unblocked lines
blocked_lines <- marginal_line_ids[in_soln_wrias] %>% unlist()
leaflet_lines <- lines %>% filter(COMID %in% blocked_lines)
#Defined blocked/unblocked
milp_stream_ids <- marginal_line_ids[soln] %>% unlist()
#Barrier color
pal <- leaflet::colorNumeric(c("#b80000", "#179848"), 0 : 1)
#Add lines
if(glify == TRUE){
leaflet_lines %>% head() %>% print()
leaf_proxy <- leaf_proxy %>%
leafgl::addGlPolylines(data = leaflet_lines %>%
filter(FCODE != 55800, !COMID %in% milp_stream_ids),
color = "#d46666",
opacity = 0.5
) %>%
leafgl::addGlPolylines(
data = leaflet_lines %>%
filter(COMID %in% milp_stream_ids),
color = "#3cdd78",
opacity = 0.5
)
}
leaf_proxy=leaflet_proxy
#Add lines
if(glify == TRUE){
leaflet_lines %>% head() %>% print()
leaf_proxy <- leaf_proxy %>%
leafgl::addGlPolylines(data = leaflet_lines %>%
filter(FCODE != 55800, !COMID %in% milp_stream_ids),
color = "#d46666",
opacity = 0.5
) %>%
leafgl::addGlPolylines(
data = leaflet_lines %>%
filter(COMID %in% milp_stream_ids),
color = "#3cdd78",
opacity = 0.5
)
}
else{
leaflet_lines %>% head() %>% print()
leaf_proxy <- leaf_proxy %>%
leafgl::addGlPolylines(data = leaflet_lines %>%
filter(FCODE != 55800, !COMID %in% milp_stream_ids),
color = "#d46666",
opacity = 0.5
) %>%
leafgl::addGlPolylines(
data = leaflet_lines %>%
filter(COMID %in% milp_stream_ids),
color = "#3cdd78",
opacity = 0.5
)
leaf_proxy
library(here)
library(leaflet)
library(leafgl)
library(sf)
library(tidyverse)
library(ROI)
library(ROI.plugin.glpk)
load(here("data", "D.rda"))
load(here("data", "culverts_cmb.rda"))
load(here("data", "wrias.rda"))
load(here("data", "lines_simp.rda"))
load(here("data", "marginal_line_ids.rda"))
source(here("R", "fct_suggest.R"))
soln <- solve_opt(
points = culverts_cmb, #points with variables: hmarg_net, cost, and wria_number
budget = 1e6, #budget constraint
D = D, #connectivity matrix
wria_sel = 7 #wria to run the optimization problem on
)
points = culverts_cmb #culverts
lines = lines_simp #lines with linestring geometries if glify = TRUE
soln = soln #output from solve_opt()
marginal_line_ids = marginal_line_ids #comids for all lines marginally upstream of each point
leaflet_proxy <- wrias %>%
leaflet::leaflet() %>%
leaflet::addProviderTiles("CartoDB.Positron", group = "Grayscale", options = leaflet::providerTileOptions(minZoom = 7))  %>%
leaflet::addScaleBar("bottomleft") %>%
leaflet::addPolygons(
popup =  ~ paste0(
"<b>WRIA Name:</b> ",
WRIA_NM,
"<br>",
"<b>WRIA Number:</b> ",
WRIA_NR
),
weight = 1.5,
opacity = 1,
color = "#1c1cff",
fillColor = "transparent"
)
map_leaflet_opt(
leaflet_proxy,
culverts_cmb, #culverts
lines_simp, #lines with linestring geometries
soln, #output from solve_opt()
marginal_line_ids #comids for all lines marginally upstream of each point
)
library(here)
library(leaflet)
library(leafgl)
library(sf)
library(tidyverse)
library(ROI)
library(ROI.plugin.glpk)
load(here("data", "D.rda"))
load(here("data", "culverts_cmb.rda"))
load(here("data", "wrias.rda"))
load(here("data", "lines_simp.rda"))
load(here("data", "marginal_line_ids.rda"))
source(here("R", "fct_suggest.R"))
soln <- solve_opt(
points = culverts_cmb, #points with variables: hmarg_net, cost, and wria_number
budget = 1e6, #budget constraint
D = D, #connectivity matrix
wria_sel = 7 #wria to run the optimization problem on
)
points = culverts_cmb #culverts
lines = lines_simp #lines with linestring geometries if glify = TRUE
soln = soln #output from solve_opt()
marginal_line_ids = marginal_line_ids #comids for all lines marginally upstream of each point
leaflet_proxy <- wrias %>%
leaflet::leaflet() %>%
leaflet::addProviderTiles("CartoDB.Positron", group = "Grayscale", options = leaflet::providerTileOptions(minZoom = 7))  %>%
leaflet::addScaleBar("bottomleft") %>%
leaflet::addPolygons(
popup =  ~ paste0(
"<b>WRIA Name:</b> ",
WRIA_NM,
"<br>",
"<b>WRIA Number:</b> ",
WRIA_NR
),
weight = 1.5,
opacity = 1,
color = "#1c1cff",
fillColor = "transparent"
)
map_leaflet_opt(
leaflet_proxy,
culverts_cmb, #culverts
lines_simp, #lines with linestring geometries
soln, #output from solve_opt()
marginal_line_ids #comids for all lines marginally upstream of each point
)
library(here)
library(leaflet)
library(leafgl)
library(sf)
library(tidyverse)
library(ROI)
library(ROI.plugin.glpk)
load(here("data", "D.rda"))
load(here("data", "culverts_cmb.rda"))
load(here("data", "wrias.rda"))
load(here("data", "lines_simp.rda"))
load(here("data", "marginal_line_ids.rda"))
source(here("R", "fct_suggest.R"))
soln <- solve_opt(
points = culverts_cmb, #points with variables: hmarg_net, cost, and wria_number
budget = 1e6, #budget constraint
D = D, #connectivity matrix
wria_sel = 7 #wria to run the optimization problem on
)
points = culverts_cmb #culverts
lines = lines_simp #lines with linestring geometries if glify = TRUE
soln = soln #output from solve_opt()
marginal_line_ids = marginal_line_ids #comids for all lines marginally upstream of each point
leaf_proxy <- wrias %>%
leaflet::leaflet() %>%
leaflet::addProviderTiles("CartoDB.Positron", group = "Grayscale", options = leaflet::providerTileOptions(minZoom = 7))  %>%
leaflet::addScaleBar("bottomleft") %>%
leaflet::addPolygons(
popup =  ~ paste0(
"<b>WRIA Name:</b> ",
WRIA_NM,
"<br>",
"<b>WRIA Number:</b> ",
WRIA_NR
),
weight = 1.5,
opacity = 1,
color = "#1c1cff",
fillColor = "transparent"
)
map_leaflet_opt(
leaf_proxy,
culverts_cmb, #culverts
lines_simp, #lines with linestring geometries
soln, #output from solve_opt()
marginal_line_ids #comids for all lines marginally upstream of each point
)
as.integer("$ 100,000")
library(here)
library(leaflet)
library(leafgl)
library(sf)
library(tidyverse)
library(ROI)
library(ROI.plugin.glpk)
load(here("data", "D.rda"))
load(here("data", "culverts_cmb.rda"))
load(here("data", "wrias.rda"))
load(here("data", "lines_simp.rda"))
load(here("data", "marginal_line_ids.rda"))
source(here("R", "fct_suggest.R"))
source(here("R", "fct_custom.R"))
View(map_leaflet_custom)
load(here("data", "E.rda"))
choices = culverts_cmb %>% sf::st_drop_geometry() %>% dplyr::pull(site_id) %>% sort()
choices
prtf_cust =
culverts_cmb %>%
sf::st_drop_geometry() %>%
dplyr::pull(site_id) %>%
sort() %>%
dplyr::slice(1 : 100)
prtf_cust =
culverts_cmb %>%
sf::st_drop_geometry() %>%
dplyr::pull(site_id) %>%
sort()
prtf_cust[1:100]
prtf_cust[1]
prtf_cust[2]
prtf_cust[3]
map_leaflet_custom(
leaf_proxy,
points, #culverts
lines, #lines with linestring geometries
prtf_cust[1:100], #inputs from mod_Custom
E, #full connectivity matrix
marginal_line_ids
)
#inputs ----
points = culverts_cmb #culverts
lines = lines_simp #lines with linestring geometries
soln = soln #output from solve_opt()
#inputs ----
points = culverts_cmb #culverts
lines = lines_simp #lines with linestring geometries
marginal_line_ids = marginal_line_ids #comids for all lines marginally upstream of each point
leaf_proxy <- wrias %>%
leaflet::leaflet() %>%
leaflet::addProviderTiles("CartoDB.Positron", group = "Grayscale", options = leaflet::providerTileOptions(minZoom = 7))  %>%
leaflet::addScaleBar("bottomleft") %>%
leaflet::addPolygons(
popup =  ~ paste0(
"<b>WRIA Name:</b> ",
WRIA_NM,
"<br>",
"<b>WRIA Number:</b> ",
WRIA_NR
),
weight = 1.5,
opacity = 1,
color = "#1c1cff",
fillColor = "transparent"
)
prtf_cust =
culverts_cmb %>%
sf::st_drop_geometry() %>%
dplyr::pull(site_id) %>%
sort()
map_leaflet_custom(
leaf_proxy,
points, #culverts
lines, #lines with linestring geometries
prtf_cust[1:100], #inputs from mod_Custom
E, #full connectivity matrix
marginal_line_ids
)
prtf_cust =
culverts_cmb %>%
sf::st_drop_geometry() %>%
dplyr::pull(site_id) %>%
sort()
prtf_cust = prtf_cust[1:100]
map_leaflet_custom(
leaf_proxy,
points, #culverts
lines, #lines with linestring geometries
prtf_cust, #inputs from mod_Custom
E, #full connectivity matrix
marginal_line_ids
)
cust <- points$site_id %in% prtf_cust
#Identify points in custom plan that unlock habitat
h_inc <- lapply(1 : length(prtf_cust),
FUN = function(x) ifelse(sum(E[, prtf_cust[x]]) == 0, TRUE,
ifelse(sum(which(E[, prtf_cust[x]] == 1) %in% prtf_cust) ==
length(which(E[, prtf_cust[x]] == 1)), TRUE, FALSE))) %>%
do.call("rbind", .) %>%
as.logical()
#Crop lines to wrias in plan regardless of whether they unlock habitat
cust_wrias <- unique(points[points$site_id %in% prtf_cust, ]$wria_number)
in_cust_wrias <- points$wria_number %in% cust_wrias
#First get blocked/unblocked lines
blocked_lines <- marginal_line_ids[in_cust_wrias] %>% unlist()
leaflet_lines <- lines %>% dplyr::filter(COMID %in% blocked_lines)
milp_stream_ids <- marginal_line_ids[prtf_cust[h_inc]] %>% unlist()
#Barrier color
pal <- leaflet::colorNumeric(c("#b80000", "#179848"), 0 : 1)
#Add lines
leaf_proxy <- leaf_proxy %>%
leafgl::addGlPolylines(data = leaflet_lines %>%
dplyr::filter(FCODE != 55800, !COMID %in% milp_stream_ids),
color = "#d46666",
opacity = 0.5
) %>%
leafgl::addGlPolylines(
data = leaflet_lines %>%
dplyr::filter(COMID %in% milp_stream_ids),
color = "#3cdd78",
opacity = 0.5
)
check = leaflet_lines %>%
dplyr::filter(FCODE != 55800, !COMID %in% milp_stream_ids)
View(check)
unique(st_geometry_type(check))
leaf_proxy <- leaf_proxy %>%
leafgl::addGlPolylines(data = leaflet_lines %>%
dplyr::filter(FCODE != 55800, !COMID %in% milp_stream_ids),
color = "#d46666",
opacity = 0.5
)
leaf_proxy <- leaf_proxy %>%
leafgl::addGlPolylines(data = leaflet_lines %>%
dplyr::filter(FCODE != 55800, !COMID %in% milp_stream_ids),
color = "#d46666",
opacity = 0.5
)  %>%
leafgl::addGlPolylines(
data = leaflet_lines %>%
dplyr::filter(COMID %in% milp_stream_ids),
color = "#3cdd78",
opacity = 0.5
)
prtf_cust[h_inc]
View(marginal_line_ids)
rm(list=ls())
library(here)
library(leaflet)
library(leafgl)
library(sf)
library(tidyverse)
library(ROI)
library(ROI.plugin.glpk)
load(here("data", "D.rda"))
load(here("data", "E.rda"))
load(here("data", "culverts_cmb.rda"))
load(here("data", "wrias.rda"))
load(here("data", "lines_simp.rda"))
load(here("data", "marginal_line_ids.rda"))
source(here("R", "fct_suggest.R"))
source(here("R", "fct_custom.R"))
#inputs ----
points = culverts_cmb #culverts
lines = lines_simp #lines with linestring geometries
marginal_line_ids = marginal_line_ids #comids for all lines marginally upstream of each point
leaf_proxy <- wrias %>%
leaflet::leaflet() %>%
leaflet::addProviderTiles("CartoDB.Positron", group = "Grayscale", options = leaflet::providerTileOptions(minZoom = 7))  %>%
leaflet::addScaleBar("bottomleft") %>%
leaflet::addPolygons(
popup =  ~ paste0(
"<b>WRIA Name:</b> ",
WRIA_NM,
"<br>",
"<b>WRIA Number:</b> ",
WRIA_NR
),
weight = 1.5,
opacity = 1,
color = "#1c1cff",
fillColor = "transparent"
)
prtf_cust =
culverts_cmb %>%
sf::st_drop_geometry() %>%
dplyr::pull(site_id) %>%
sort()
prtf_cust = prtf_cust[1:100]
map_leaflet_custom(
leaf_proxy,
points, #culverts
lines, #lines with linestring geometries
prtf_cust, #inputs from mod_Custom
E, #full connectivity matrix
marginal_line_ids
)
source(here("R", "fct_custom.R"))
map_leaflet_custom(
leaf_proxy,
points, #culverts
lines, #lines with linestring geometries
prtf_cust, #inputs from mod_Custom
E, #full connectivity matrix
marginal_line_ids
)
